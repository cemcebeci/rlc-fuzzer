subsystem main

ent Player:
	vector<Card> cards
	int id
	int money

enu Card {duca, assassino, contessa, capitano, ambasciatore}

ent Root:
	vector<Player> players
	vector<Card> deck
	int currentPlayer

act Player.end_turn():
	private
	enabled when id == currentPlayer
	currentPlayer = (currentPlayer + 1)	% players.size()

act Player.take_1():
	money += 1
	endTurn()

fun Player.damage() -> void:
	wait act discard(int card):
	deck.remove(cardLost)

fun Player.redraw(Card toRemove) -> void:
	cards.remove(toRemove)	
	deck.insert(toRemove)	
	shuffle(deck)
	cards.insert(deck.pop_front())
		
act Player.take_3():

	Player doubter = wait Player.doubt():
		enabled when currentPlayer != id

	if doubter == null:
		money += 3
		end_turn()
		return

	if contains(player[currentPlayer].cards, duca):
		doubter.damage()
		redraw(duca)
		money += 3
	else:
		damage()	

	endTurn()	

act Player.take_2():

	Player ducaClaimer = wait Player.claim_duca():
		enabled when currentPlayer != id

	if ducaClaimer == null:
		money += 2
		end_turn()
		return

	Player doubter = wait Player.doubt():
		enabled when currentPlayer != id and ducaClaimer != this

	if doubter == null:
		end_turn()
		return

	if contains(ducaClaimer.cards, duca):
		doubter.damage()
		ducaClaimer.redraw(duca)
	else:
		ducaClaimer.damage()
		money += 2	

	endTurn()

act Player.steal(Player target):
	Player doubter = wait Player.doubt():
		enabled when currentPlayer != id

	if doubter != null:
		if contains(cards, capitano):
			doubter.damage()
			redraw(capitano)
		else
			damage()
			return

		
	if not wait_for_amb_cap()
		target.money -= 2
		money += 2	
	

act Player.assassinate(Player target):
	money -= 3
	Player doubter = wait Player.doubt():
		enabled when currentPlayer != id
	
	if doubter != null:
		if contains(cards, assassino)
			doubter.damage()
			redraw(assassino)
		else:
			damage()
			return

	if not wait_for_claim():
		target.damage()
				

fun Player.wait_for_cap_amb() -> bool:
	Player claimer = wait Player.claimAmbCap()
		enabled when players[currentPlayer].steal.target == this

	if claimer == null:
		return false 

	Player doubter = wait Player.doubt():
		enabled when this != claimer 

	if contains(cards, ambasciatore) or contains(card, capitano)
		doubter.damage()
		redraw(ambasciatore)
		return true

	damage()
	return false

fun Player.wait_for_claim() -> bool:
	Player claimer = wait Player.claimContessa()
		enabled when players[currentPlayer].assassinate.target == this

	if claimer == null:
		return false 

	Player doubter = wait Player.doubt():
		enabled when this != claimer 

	if contains(cards, contessa)
		doubter.damage()
		redraw(contessa)
		return true

	damage()
	return false

rul skip_dead_players:
	after end_turn 
	while players[currentPlayer].cards.size() == 0:
		currentPlayer = (currentPlayer + 1)	% players.size()


ext contains(vector<Card>, Card) -> bool
